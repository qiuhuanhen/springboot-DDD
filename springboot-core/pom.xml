<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.qiuhuanhen</groupId>
        <artifactId>springboot-root</artifactId>
        <version>1.0.0</version>
    </parent>

    <artifactId>springboot-core</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>


    <dependencies>

        <!-- web项目jar包 包含starter、spring、webmvc 等-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>


        <!-- validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- websocket-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>

        <!-- 邮件依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>

        <!--json 低版本会有各种反序列化漏洞 尽量使用新版-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
        </dependency>


        <!-- aop -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
        </dependency>

        <!--数据库-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!--mybatis plus-->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-core</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-extension</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
        </dependency>

        <!-- mybatis plus 动态数据源 -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>dynamic-datasource-spring-boot-starter</artifactId>
        </dependency>


        <!-- Reactor反应式编程-->
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-core</artifactId>
        </dependency>


        <!-- excel工具 -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
        </dependency>

        <!-- guava工具包-->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>

        <!-- bean拷贝工具 -->
        <dependency>
            <groupId>ma.glasnost.orika</groupId>
            <artifactId>orika-core</artifactId>
        </dependency>

        <!-- 动态字节码工具 (orika实现原理)  orika其实已经引入该包
         这里显式引入  项目中有javassist demo （实际项目中可以去除该包）-->
        <dependency>
            <groupId>org.javassist</groupId>
            <artifactId>javassist</artifactId>
        </dependency>

        <!--        &lt;!&ndash; security&ndash;&gt;-->
        <!--        <dependency>-->
        <!--            <groupId>org.springframework.boot</groupId>-->
        <!--            <artifactId>spring-boot-starter-security</artifactId>-->
        <!--            <version>2.3.4.RELEASE</version>-->
        <!--        </dependency>-->


        <!-- swagger  注意swagger有高度的版本不兼容性 -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <exclusions>
                <!-- 需要排除自带的1.5.20版本 swagger bug 会有类型异常-->
                <exclusion>
                    <groupId>io.swagger</groupId>
                    <artifactId>swagger-models</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-models</artifactId>
        </dependency>

        <!--可以只引入该包，这个包包含了所有依赖，暴露/doc.html页面-->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-spring-boot-starter</artifactId>
        </dependency>
        <!--可选，引入后，原/swagger-ui.html提供的页面仍可正常使用-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
        </dependency>

        <!-- schedule lock -->
        <dependency>
            <groupId>net.javacrumbs.shedlock</groupId>
            <artifactId>shedlock-spring</artifactId>
            <!-- 排除内置spring 解决版本冲突问题-->
            <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-context</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>net.javacrumbs.shedlock</groupId>
            <artifactId>shedlock-provider-jdbc-template</artifactId>
            <!-- 排除内置spring 解决版本冲突问题-->
            <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-jdbc</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--  hutool 工具包  -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
        </dependency>

        <dependency>
            <groupId>com.qiuhuanhen</groupId>
            <artifactId>springboot-pojo</artifactId>
            <version>1.0.0</version>
        </dependency>

        <!-- load local jar 加载本地jar包-->
        <!-- 注意 关于 cn.vae.singer.rocketmq 的补充说明 封装rocket的jar包 以下简称 cn 包 -->
        <!-- cn 它本身是来自于聚合项目中的一个子模块  它还有个父工程 父工程packing为pom-->
        <!-- 下面这是本地打包方式 不引入父依赖的前提下不能实现依赖传递的 里面引入的原生rocketmq依赖 下载不下来 -->
        <!-- 那我们既不想引入父依赖 又不想重复引入rocketmq依赖包 那只能在cn模块打包时 就将rocketmq的包打进去-->
        <!-- cn模块打包教程：maven-assembly-plugin 插件 注意不要将其它非必要的包打进去 通过scope 定义为provided限制-->
        <!-- 最后：上面说的都是基于本地打包 且不引入其它依赖  如果直接在maven仓库下载 会方便很多-->
        <dependency>
            <groupId>cn.vae.singer</groupId>
            <artifactId>rocketmq</artifactId>
            <version>${framework.version}</version>
            <scope>system</scope>
            <systemPath>
                ${project.basedir}/src/main/java/com/qiuhuanhen/springroot/infrastructure/libs/rocketmq-1.0.0.jar
            </systemPath>
        </dependency>

        <!--排除starter-logging包下所有依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>


        <!-- log4j bug 版本包-->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.13.3</version>
        </dependency>

    </dependencies>


    <build>
        <plugins>
            <!-- 这个只会将自己写的代码打包-->
            <!--<plugin>-->
            <!--<groupId>org.apache.maven.plugins</groupId>-->
            <!--<artifactId>maven-compiler-plugin</artifactId>-->
            <!--<version>3.3</version>-->
            <!--<configuration>-->
            <!--<source>1.8</source>-->
            <!--<target>1.8</target>-->
            <!--</configuration>-->
            <!--</plugin>-->

            <!-- 聚合工程中适用的打包方式 使得当前子项目可以直接运行 (结合父工程的定义)-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- 指定该Main Class为全局的唯一入口 这里是启动类的地址 -->
                    <mainClass>com.qiuhuanhen.springroot.Application</mainClass>
                    <layout>ZIP</layout>
                    <!-- 把system也打包-->
                    <includeSystemScope>true</includeSystemScope>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal><!--可以把依赖的包都打包到生成的Jar包中-->
                        </goals>
                    </execution>
                </executions>
            </plugin>


        </plugins>

        <!-- 把静态资源也一起打包-->
        <resources>
            <resource>
                <directory>src/main/resources</directory>

                <!-- 让Spring的范围内能取到maven的参数  开启后spring识别@ @ 表达式 -->
                <filtering>true</filtering>
            </resource>


        </resources>
    </build>


</project>